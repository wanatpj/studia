Elementy imperatywne SML'a

1. Referencje.
Referencje tworzymy za pomocą słowa kluczowego 'ref': 

- val rx = ref 0;

Zwróć uwagę na typ rx.
Do dereferencji możemy użyć operatora '!' lub pattern matching.

- val x	= !rx;
- val (ref x) = rx;

Wartość komórki pamięci wskazywanej przez referencję możemy zmienić za pomocą operatora ':='.

- val () = rx := 9;
- rx;

Rożnica z normalnymi wartościami:

- val y=0;
- let val y=1 in () end;
- y;

- val rx= ref 0;
- let val () = rx:= 9; in () end;
- !rx;

Równość na referencjach.

- val rx= ref 0;
- val ry= ref 0;
- val rz = rx;
- rx = ry;
- rx = rz;

2. "Obiekty"

local 
	val rc = ref 0;
in 
	fun tick () = rc := (!rc +1);
	fun reset ()= rc:= 0;
	fun get () = !rc;
end

To samo ale z konstruktorem. Przy okazji składnia dla rekordów.

type counter = {get:unit -> int, reset:unit -> unit, tick:unit -> unit};

fun counter () = let 
		val rc = ref 0;
		fun tickI () = rc := (!rc +1);
		fun resetI ()= rc:= 0;
		fun getI () = !rc;
	in {tick= tickI, reset= resetI,get=getI} end;

fun do_tick ({tick= tickI, ...}:counter) = tickI ();
fun do_reset ({reset= resetI, ...}:counter) = resetI ();
fun do_get ({get= getI, ...}:counter) = getI ();


3. Vectors and Arrays. Array implementuje tablicę komórek pamięci określonego typu. Komórki można zmieniać analogicznie do wartości wskazywanych przez 'ref'. Vector to analogiczna tablica przechowujące wartości, które nie mogą być zmieniane. W obu przypadkach czas dostępu do wszystkich elementów tablicy jest stały.

Dokumentacja:
http://www.standardml.org/Basis/array.html
http://www.standardml.org/Basis/vector.html

Przykład - funkcja która dla zadanej permutacji {0,..,n-1} zwraca długość cyklu do którego należy 0.

fun cycle_length perm = let
		val permA = Vector.fromList perm;
		fun it k = let
				val next= Vector.sub (permA ,k );
			in if (next=0) then 1 else 1+ (it next) end;
	in it 0 end;

- cycle_length [6,0,3,2,4,5,7,1];
val it = 4 : int

Ćwiczenie 1: napisz funkcję która dla danej premutacji zwróci długość najdłuższego cyklu. Postaraj się aby funkcja działała w czasie liniowym.

- max_cycle_length [6,0,3,2,4,5,7,1];
val it = 4 : int
- max_cycle_length [6,0,3,8,2,4,5,7,1];
val it = 8 : int
- max_cycle_length [5,8,3,4,1,0,6,7,2];
val it = 5 : int

Ćwiczenie 2: posortuj tablicę liczb w miejscu.

- fun printA arr= Array.foldl (fn (x,_) => print (Int.toString x ^":")) () arr;
val printA = fn : int array -> unit
- val ar1= (Array.fromList [5,1,7,2,3,8,9,0,4,4]);
val ar1 = [|5,1,7,2,3,8,9,0,4,4|] : int array
- sort ar1;
val it = () : unit
- printA ar1;
0:1:2:3:4:4:5:7:8:9:val it = () : unit

Ćwiczenie 3: wypisz drzewo w kolejności bfs w czasie liniowym.

datatype 'a Tree = Empty | Two of 'a Tree * 'a * 'a Tree;

fun insert cmp x Empty= Two (Empty,x,Empty)
	|insert cmp x (Two (l,y,r))= if (cmp (x,y)<0) then Two (insert cmp x l, y, r)
		else Two (l,y,insert cmp x r); 

fun fromList cmp xs= foldl (fn (x,tr) => insert cmp x tr) Empty xs

fun mcmp (x,y) = x-y;

val tr1= fromList mcmp [6,5,4,1,9,3,5];

- dfs tr1;
val it = [6,5,9,4,5,1,3] : int list

